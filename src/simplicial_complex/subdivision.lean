/-
Copyright (c) 2021 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import analysis.specific_limits.basic
import simplicial_complex.basic

/-!
# Subdivision of simplicial complexes
-/

open geometry finset set

variables {ùïú E : Type*}

namespace geometry.simplicial_complex
section ordered_ring
variables [ordered_ring ùïú] [add_comm_group E] [module ùïú E] {m : ‚Ñï}
  {K K‚ÇÅ K‚ÇÇ K‚ÇÉ : simplicial_complex ùïú E}

/-- `K‚ÇÅ` is a subdivision of `K‚ÇÇ` iff their underlying space is the same and each face of `K‚ÇÅ` is
contained in some face of `K‚ÇÇ`. -/
def subdivides (K‚ÇÅ K‚ÇÇ : simplicial_complex ùïú E) : Prop :=
K‚ÇÅ.space = K‚ÇÇ.space ‚àß
  ‚àÄ ‚¶És‚ÇÅ‚¶Ñ, s‚ÇÅ ‚àà K‚ÇÅ ‚Üí ‚àÉ s‚ÇÇ ‚àà K‚ÇÇ, convex_hull ùïú (s‚ÇÅ : set E) ‚äÜ convex_hull ùïú (s‚ÇÇ : set E)

@[refl] lemma subdivides.refl (K : simplicial_complex ùïú E) : K.subdivides K :=
‚ü®rfl, Œª s hs, ‚ü®s, hs, subset.rfl‚ü©‚ü©

lemma subdivides.rfl : K.subdivides K := subdivides.refl _

@[trans] lemma subdivides.trans (h‚ÇÅ‚ÇÇ : K‚ÇÅ.subdivides K‚ÇÇ) (h‚ÇÇ‚ÇÉ : K‚ÇÇ.subdivides K‚ÇÉ) :
  K‚ÇÅ.subdivides K‚ÇÉ :=
‚ü®h‚ÇÅ‚ÇÇ.1.trans h‚ÇÇ‚ÇÉ.1, Œª s‚ÇÅ hs‚ÇÅ, let ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅ‚ÇÇ‚ü© := h‚ÇÅ‚ÇÇ.2 hs‚ÇÅ, ‚ü®s‚ÇÉ, hs‚ÇÉ, hs‚ÇÇ‚ÇÉ‚ü© := h‚ÇÇ‚ÇÉ.2 hs‚ÇÇ in
  ‚ü®s‚ÇÉ, hs‚ÇÉ, hs‚ÇÅ‚ÇÇ.trans hs‚ÇÇ‚ÇÉ‚ü©‚ü©

end ordered_ring

section seminormed_add_comm_group
variables [seminormed_add_comm_group E] [t2_space E] [normed_space ‚Ñù E] {s t : finset E} {m : ‚Ñï}
  {K‚ÇÅ K‚ÇÇ : simplicial_complex ‚Ñù E}

lemma subdivides_iff_combi_interiors_subset_combi_interiors :
  K‚ÇÅ.subdivides K‚ÇÇ ‚Üî K‚ÇÇ.space ‚äÜ K‚ÇÅ.space ‚àß
  ‚àÄ s‚ÇÅ ‚àà K‚ÇÅ, ‚àÉ s‚ÇÇ ‚àà K‚ÇÇ, combi_interior ‚Ñù s‚ÇÅ ‚äÜ combi_interior ‚Ñù s‚ÇÇ :=
begin
  refine ‚ü®Œª h, ‚ü®h.1.symm.subset, Œª s hs, _‚ü©, Œª h, ‚ü®h.1.antisymm' $ Œª x hx, _, Œª s‚ÇÅ hs‚ÇÅ, _‚ü©‚ü©,
  { obtain ‚ü®t, ht, hst‚ü© := h.2 hs,
    obtain ‚ü®u, hut, hu, hsu‚ü© := simplex_combi_interiors_split_interiors_nonempty (K‚ÇÅ.nonempty hs)
      (K‚ÇÇ.indep ht) hst,
    exact ‚ü®u, K‚ÇÇ.down_closed' ht hut hu, hsu‚ü© },
  { obtain ‚ü®s‚ÇÅ, hs‚ÇÅ, hx‚ü© := mem_space_iff.1 hx,
    obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅs‚ÇÇ‚ü© := h.2 _ hs‚ÇÅ,
    rw mem_space_iff,
    exact ‚ü®s‚ÇÇ, hs‚ÇÇ, convex_hull_subset_convex_hull_of_combi_interior_subset_combi_interior
      (K‚ÇÅ.indep hs‚ÇÅ) (K‚ÇÇ.indep hs‚ÇÇ) hs‚ÇÅs‚ÇÇ hx‚ü© },
  { obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅs‚ÇÇ‚ü© := h.2 _ hs‚ÇÅ,
    exact ‚ü®_, hs‚ÇÇ, convex_hull_subset_convex_hull_of_combi_interior_subset_combi_interior
      (K‚ÇÅ.indep hs‚ÇÅ) (K‚ÇÇ.indep hs‚ÇÇ) hs‚ÇÅs‚ÇÇ‚ü© }
end

lemma subdivides_iff_partition :
  K‚ÇÅ.subdivides K‚ÇÇ ‚Üî (K‚ÇÅ.faces.nonempty ‚Üí K‚ÇÇ.faces.nonempty) ‚àß K‚ÇÅ.space ‚äÜ K‚ÇÇ.space ‚àß
    ‚àÄ s‚ÇÇ ‚àà K‚ÇÇ, ‚àÉ F ‚äÜ K‚ÇÅ.faces, combi_interior ‚Ñù s‚ÇÇ = ‚ãÉ (s‚ÇÅ ‚àà F), combi_interior ‚Ñù s‚ÇÅ :=
begin
  split,
  { rintro ‚ü®hspace, hsubdiv‚ü©,
    refine ‚ü®_, hspace.le, Œª s hs, _‚ü©,
    { rintro ‚ü®s‚ÇÅ, hs‚ÇÅ‚ü©,
      obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅs‚ÇÇ‚ü© := hsubdiv hs‚ÇÅ,
      exact ‚ü®s‚ÇÇ, hs‚ÇÇ‚ü© },
    refine ‚ü®{t | t ‚àà K‚ÇÅ ‚àß combi_interior ‚Ñù t ‚äÜ combi_interior ‚Ñù s}, (Œª t ht, ht.1), _‚ü©,
    ext x,
    refine ‚ü®Œª hxs, _, _‚ü©,
    { have hxspace := mem_space_iff.2 ‚ü®s, hs, hxs.1‚ü©,
      rw [‚Üêhspace, ‚Üêcombi_interiors_cover, mem_Union‚ÇÇ] at hxspace,
      obtain ‚ü®t, ht, hxt‚ü© := hxspace,
      refine mem_Union‚ÇÇ_of_mem ‚ü®ht, Œª y hyt, _‚ü© hxt,
      obtain ‚ü®u, hu, htu‚ü© := hsubdiv ht,
      obtain ‚ü®W, hWu, htW‚ü© := simplex_combi_interiors_split_interiors (K‚ÇÇ.indep hu) htu,
      rw disjoint_interiors hs (K‚ÇÇ.down_closed hu hWu _) hxs (htW hxt),
      exact htW hyt,
      sorry },
    { rw mem_Union‚ÇÇ,
      rintro ‚ü®t, ‚ü®ht, hts‚ü©, hxt‚ü©,
      exact hts hxt } },
  { rintro ‚ü®hempty, hspace, hpartition‚ü©,
    have hspace : K‚ÇÅ.space = K‚ÇÇ.space,
    { refine hspace.antisymm (Œª x hx, _),
      rw [‚Üêcombi_interiors_cover, mem_Union‚ÇÇ] at ‚ä¢ hx,
      obtain ‚ü®s, hs, hxs‚ü© := hx,
      obtain ‚ü®F, hF, hsint‚ü© := hpartition _ hs,
      rw [hsint, mem_Union‚ÇÇ] at hxs,
      obtain ‚ü®t, ht, hxt‚ü© := hxs,
      exact ‚ü®t, hF ht, hxt‚ü© },
    refine ‚ü®hspace, Œª s hs, _‚ü©,
    obtain rfl | hsnonempty := s.eq_empty_or_nonempty,
    { obtain ‚ü®t, ht‚ü© := hempty ‚ü®_, hs‚ü©,
      exact ‚ü®t, ht, by simp‚ü© },
    obtain ‚ü®x, hx‚ü© := hsnonempty.combi_interior (K‚ÇÅ.indep hs),
    have hxspace := mem_space_iff.2 ‚ü®s, hs, hx.1‚ü©,
    rw [hspace, ‚Üêcombi_interiors_cover, mem_Union‚ÇÇ] at hxspace,
    obtain ‚ü®t, ht, hxt‚ü© := hxspace,
    use [t, ht],
    rw ‚Üêclosure_combi_interior_eq_convex_hull (K‚ÇÅ.indep hs),
    refine closure_minimal (Œª x' hx', _) (is_closed_convex_hull _),
    have hxspace := mem_space_iff.2 ‚ü®s, hs, hx'.1‚ü©,
    rw [hspace, ‚Üêcombi_interiors_cover, mem_Union‚ÇÇ] at hxspace,
    obtain ‚ü®t', ht', hxt'‚ü© := hxspace,
    suffices htt' : t = t',
    { rw htt',
      exact hxt'.1 },
    obtain ‚ü®F, hF, hinterior‚ü© := hpartition _ ht,
    obtain ‚ü®F', hF', hinterior'‚ü© := hpartition _ ht',
    apply disjoint_interiors ht ht' (_ : x ‚àà _) _,
    { rw [hinterior, mem_Union‚ÇÇ] at ‚ä¢ hxt,
      obtain ‚ü®u, hu, hxu‚ü© := hxt,
      use [u, hu, hxu] },
    { rw [hinterior', mem_Union‚ÇÇ] at ‚ä¢ hxt',
      obtain ‚ü®u, hu, hxu‚ü© := hxt',
      refine ‚ü®u, hu, _‚ü©,
      rw ‚Üêdisjoint_interiors hs (hF' hu) hx' hxu,
      exact hx } }
end

instance : is_partial_order (simplicial_complex ‚Ñù E) subdivides :=
{ refl := subdivides.refl,
  trans := Œª K‚ÇÅ K‚ÇÇ K‚ÇÉ, subdivides.trans,
  antisymm := begin
    suffices aux_lemma : ‚àÄ {K‚ÇÅ K‚ÇÇ : simplicial_complex ‚Ñù E},
      K‚ÇÅ.subdivides K‚ÇÇ ‚Üí K‚ÇÇ.subdivides K‚ÇÅ ‚Üí ‚àÄ {s}, s ‚àà K‚ÇÅ.faces ‚Üí s ‚àà K‚ÇÇ.faces,
    { rintro K‚ÇÅ K‚ÇÇ h‚ÇÅ h‚ÇÇ,
      ext s,
      exact ‚ü®Œª hs, aux_lemma h‚ÇÅ h‚ÇÇ hs, Œª hs, aux_lemma h‚ÇÇ h‚ÇÅ hs‚ü© },
    rintro K‚ÇÅ K‚ÇÇ h‚ÇÅ h‚ÇÇ s hs,
    rw subdivides_iff_partition at h‚ÇÇ h‚ÇÅ,
    obtain ‚ü®x, hxs‚ü© := (K‚ÇÅ.nonempty hs).combi_interior (K‚ÇÅ.indep hs),
    obtain ‚ü®F, hF, hFs‚ü© := h‚ÇÇ.2.2 _ hs,
    have hxs' := hxs,
    rw [hFs, mem_Union‚ÇÇ] at hxs',
    obtain ‚ü®t, ht, hxt‚ü© := hxs',
    obtain ‚ü®F', hF', hF't‚ü© := h‚ÇÅ.2.2 _ (hF ht),
    rw [hF't, mem_Union‚ÇÇ] at hxt,
    obtain ‚ü®u, hu, hxu‚ü© := hxt,
    have := disjoint_interiors hs (hF' hu) hxs hxu,
    subst this,
    suffices h : s = t,
    { rw h,
      exact hF ht },
    refine combi_interior.inj (K‚ÇÅ.indep hs) (K‚ÇÇ.indep $ hF ht) (subset.antisymm _ _),
    { rw hF't,
      exact subset_bUnion_of_mem hu },
    { rw hFs,
      exact subset_bUnion_of_mem ht }
  end }

end seminormed_add_comm_group

/-
/-- max diameter of  simplices -/
def simplicial_complex.mesh_size (S : simplicial_complex ùïú E) : ùïú := sorry

def barycentrisation : list (fin m ‚Üí ùïú) ‚Üí fin m ‚Üí ùïú :=
  Œª L,

def simplicial_complex.barycentric_subdivision (S : simplicial_complex ùïú E) :
  simplicial_complex ùïú E :=
{ faces := {s | ‚àÉ {L : list (fin m ‚Üí ùïú)}, list.to_finset L ‚àà S.faces ‚àß s = },
  indep := _,
  down_closed := _,
  disjoint := _ }-/

end geometry.simplicial_complex
