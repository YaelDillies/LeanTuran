/-
Copyright (c) 2023 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import analysis.convex.intrinsic
import analysis.convex.topology
import analysis.inner_product_space.pi_L2

/-!
# Convex functions are continuous

This file proves that a convex function from a finite dimensional real inner product space to `‚Ñù` is
continuous.

## TODO

Can this be extended to real normed spaces?
-/

namespace real
variables {Œµ r : ‚Ñù}

open metric

lemma closed_ball_eq_segment (hŒµ : 0 ‚â§ Œµ) : closed_ball r Œµ = segment ‚Ñù (r - Œµ) (r + Œµ) :=
by rw [closed_ball_eq_Icc, segment_eq_Icc ((sub_le_self _ hŒµ).trans $ le_add_of_nonneg_right hŒµ)]

end real

section pi
variables {ùïú Œπ : Type*} {E : Œπ ‚Üí Type*} [fintype Œπ] [linear_ordered_field ùïú]
  [Œ† i, add_comm_group (E i)] [Œ† i, module ùïú (E i)] {s : set Œπ} {t : Œ† i, set (E i)} {f : Œ† i, E i}

lemma mem_convex_hull_pi (h : ‚àÄ i ‚àà s, f i ‚àà convex_hull ùïú (t i)) : f ‚àà convex_hull ùïú (s.pi t) :=
sorry -- See `mk_mem_convex_hull_prod`

@[simp] lemma convex_hull_pi (s : set Œπ) (t : Œ† i, set (E i)) :
  convex_hull ùïú (s.pi t) = s.pi (Œª i, convex_hull ùïú (t i)) :=
set.subset.antisymm (convex_hull_min (set.pi_mono $ Œª i _, subset_convex_hull _ _) $ convex_pi $
  Œª i _, convex_convex_hull _ _) $ Œª f hf, mem_convex_hull_pi hf

end pi

section
variables {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]
  {s : set E} {x : E}

open finite_dimensional metric set
open_locale big_operators

/-- We can intercalate a polyhedron between an intrinsically open set and one of its elements,
namely a small enough cube. -/
lemma is_open.exists_mem_intrinsic_interior_convex_hull_finset
  (hs : is_open (coe ‚Åª¬π' s : set $ affine_span ‚Ñù s)) (hx : x ‚àà s) :
  ‚àÉ t : finset E, x ‚àà intrinsic_interior ‚Ñù (convex_hull ‚Ñù (t : set E)) ‚àß
    convex_hull ‚Ñù (t : set E) ‚äÜ s :=
begin
  classical,
  lift x to affine_span ‚Ñù s using subset_affine_span _ _ hx,
  set x : affine_span ‚Ñù s := x with hx,
  clear_value x,
  subst hx,
  obtain ‚ü®Œµ, hŒµ, hŒµx‚ü© := (metric.nhds_basis_closed_ball.1 _).1 (is_open_iff_mem_nhds.1 hs _ hx),
  set f : finset (fin $ finrank ‚Ñù $ vector_span ‚Ñù s) ‚Üí vector_span ‚Ñù s :=
    Œª u, (Œµ / ‚àë i, ‚Äñfin_basis ‚Ñù (vector_span ‚Ñù s) i‚Äñ) ‚Ä¢ ‚àë i, if i ‚àà u then
      fin_basis ‚Ñù (vector_span ‚Ñù s) i else -fin_basis ‚Ñù (vector_span ‚Ñù s) i
      with hf,
  sorry
  -- set t := finset.univ.image (Œª u, f u +·µ• x) with ht,
  -- refine ‚ü®t, _, (convex_hull_min _ $ convex_closed_ball _ _).trans hŒµx‚ü©,
  -- { have hf' : is_open_map (Œª w : fin (finrank ‚Ñù E) ‚Üí ‚Ñù, x + ‚àë i, w i ‚Ä¢ fin_basis ‚Ñù E i) := sorry,
  --   refine interior_maximal _ (hf' _ is_open_ball) ‚ü®0, mem_ball_self zero_lt_one,
  --     by simp only [pi.zero_apply, zero_smul, finset.sum_const_zero, add_zero]‚ü©,
  --   rw image_subset_iff,
  --   refine ball_subset_closed_ball.trans _,
  --   simp_rw [closed_ball_pi _ zero_le_one, real.closed_ball_eq_segment zero_le_one,
  --     ‚Üêconvex_hull_pair, ‚Üêconvex_hull_pi, pi.zero_apply, zero_sub, zero_add, ht, finset.coe_image,
  --     finset.coe_univ, image_univ],
  --   refine convex_hull_min (Œª w hw, subset_convex_hull _ _ _) _,
  --   refine ‚ü®finset.univ.filter (Œª i, w i = 1), _‚ü©,
  --   sorry,
  --   refine (convex_convex_hull _ _).is_linear_preimage _, -- rather need bundled affine preimage
  --   sorry,
  -- },
  -- { have hŒµ' : 0 ‚â§ Œµ / finrank ‚Ñù E := by positivity,
  --   simp_rw [ht, finset.coe_image, finset.coe_univ,image_univ, range_subset_iff, mem_closed_ball,
  --     dist_self_add_left],
  --   rintro u,
  --   have hE : 0 ‚â§ ‚àë i, ‚Äñfin_basis ‚Ñù E i‚Äñ := finset.sum_nonneg (Œª x hx, norm_nonneg _),
  --   simp_rw [hf, norm_smul, real.norm_of_nonneg (div_nonneg hŒµ.le hE), div_mul_comm Œµ,
  --     mul_le_iff_le_one_left hŒµ],
  --   refine div_le_one_of_le ((norm_sum_le _ _).trans $ finset.sum_le_sum $ Œª i _, _) hE,
  --   rw [apply_ite norm, norm_neg, if_t_t] }
end

end

open finite_dimensional metric set

variables {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]
  {s : set E} {f : E ‚Üí ‚Ñù}

-- TODO: This proof actually gives local Lipschitz continuity.
-- See `is_open.exists_mem_interior_convex_hull_finset` for more todo.
protected lemma convex_on.continuous_on (hf : convex_on ‚Ñù s f) :
  continuous_on f (intrinsic_interior ‚Ñù s) :=
begin
  classical,
  -- refine is_open_interior.continuous_on_iff.2 (Œª x hx, _),
  -- obtain ‚ü®t, hxt, hts‚ü© := is_open_interior.exists_mem_interior_convex_hull_finset hx,
  -- set M := t.sup' (convex_hull_nonempty_iff.1 $ nonempty.mono interior_subset ‚ü®x, hxt‚ü©) f,
  -- refine metric.continuous_at_iff.2 (Œª Œµ hŒµ, _),
  -- have : f x ‚â§ M := le_sup_of_mem_convex_hull
  --   (hf.subset (hts.trans interior_subset) $ convex_convex_hull _ _) (interior_subset hxt),
  -- refine ‚ü®Œµ / (M - f x), _, Œª y hy, _‚ü©,
  -- sorry,
  sorry,
end

protected lemma concave_on.continuous_on (hf : concave_on ‚Ñù s f) :
  continuous_on f (intrinsic_interior ‚Ñù s) :=
sorry
